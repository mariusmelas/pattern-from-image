{"version":3,"sources":["components/CreatePattern.js","components/UploadImage.js","components/ViewImage.js","components/color-picker/CurrentColor.js","components/color-picker/AlternativeColor.js","components/color-picker/ColorPicker.js","components/ChangeColor.js","CustomHooks.js","App.js","serviceWorker.js","index.js"],"names":["CreatePatternElement","props","useEffect","perentOfMinSize","className","patternElement","map","pixel","pixelIndex","key","onClick","valueGrid","newValuePatterns","pattern","setPattern","updatePattern","index","style","backgroundColor","primaryColor","secondaryColor","CreatePattern","useState","isValue","setIsValue","newPattern","i","patternElements","j","offset","length","push","initPatternArray","window10percent","e","background","borderColor","handleSelectPatternClick","UploadImage","handleFileUpload","stopPropagation","preventDefault","file","target","files","dataTransfer","reader","FileReader","onload","handleImageUpload","result","onerror","console","log","readAsDataURL","onDragOver","onDrop","tabIndex","htmlFor","color","id","width","visibility","type","onChange","ViewPattern","undefined","WIDTH","setWIDTH","HEIGHT","setHEIGHT","isBigSize","setIsBigSize","orientation","window","visualViewport","height","size","patternElementWidth","patternCanvasRef","useRef","canvas","current","ctx","getContext","posInPixelated","valueOfPixel","pixelated","pixelPattern","x","y","posInPattern","fillStyle","fillRect","ref","ViewImage","canvasRef","findAverageColor","pixels","rgba","p","Math","round","img","Image","src","uploadedImage","addEventListener","drawImage","imageData","getImageData","Array","from","data","max","forEach","n","greyscaleRGBValue","minimizer","numberOfValues","value","findValue","handlePixelated","display","gridTemplateColumns","ViewCanvas","setUploadedImage","setPixelated","CurrentColor","currentColorStyle","position","top","left","transform","paddingTop","borderRadius","border","zIndex","handleClick","AlternativeColor","setPosition","startX","setStartX","startY","setStartY","handleResize","containerWidth","forwardRef","offsetWidth","currentColorRadius","alternativeColorRadius","centerY","offsetHeight","r","deg","PI","cos","sin","removeEventListener","alternativeColorStyle","spring","useSpring","config","duration","showColors","opacity","div","handleSwapColor","ColorPicker","containerRef","colors","setColors","isColor","hasColor","setHasColor","setShowColors","indexOfClickedColor","updateHasColor","updateColors","setSelectedColor","containerStyle","ChangeColor","setPrimaryColor","setSecondaryColor","isChangeColor","setIsChangeColor","gridTemplateRows","justifyItems","alignItems","right","bottom","selectedColor","colorID","marginBottom","transformOrigin","borderBottom","padding","usePercentOfMinSize","percent","setSize","newSize","innerWidth","innerHeight","floor","App","percentOfMinSize","document","body","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ead8d31.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './styles/create-pattern-values.css'\n\nfunction initPatternArray() {\n  const numberOfValues = 6\n  const createPatternGridSize = 6 * 6\n  let newPattern = []\n\n  // Inital pattern\n  for (let i = 0; i < numberOfValues; i++) {\n    const patternElements = []\n    for (let j = 0; j < createPatternGridSize; j++) {\n      const offset = newPattern.length + 1\n      patternElements.push(j % offset === 0 ? true : false)\n    }\n    newPattern.push(patternElements)\n  }\n\n  return newPattern\n}\n\nfunction CreatePatternElement(props) {\n  // Grid too draw one element of the pattern\n\n  useEffect(() => {}, [props.perentOfMinSize])\n\n  const updatePattern = (valueGrid, pixel) => {\n    let newValuePatterns = [...props.pattern]\n    newValuePatterns[valueGrid][pixel] = !newValuePatterns[valueGrid][\n      pixel\n    ]\n    props.setPattern(newValuePatterns)\n  }\n\n  return (\n    <div className=\"create-pattern\">\n      {props.patternElement.map((pixel, pixelIndex) => (\n        <div\n          key={(pixel, pixelIndex)}\n          onClick={() => updatePattern(props.index, pixelIndex)}\n          className=\"pattern-pixel\"\n          style={{\n            backgroundColor: pixel\n              ? props.primaryColor\n              : props.secondaryColor,\n          }}\n        />\n      ))}\n    </div>\n  )\n}\n\nfunction CreatePattern(props) {\n  const [isValue, setIsValue] = useState(0)\n  useEffect(() => {\n    // Set up array that stores the pattern drawn by user.\n    props.setPattern(initPatternArray())\n  }, [])\n\n  function handleSelectPatternClick(i) {\n    setIsValue(i)\n  }\n\n  return (\n    <div className=\"create-pattern-mobile-container\">\n      {props.pattern && (\n        <CreatePatternElement\n          patternElement={props.pattern[isValue]}\n          index={isValue}\n          pattern={props.pattern}\n          setPattern={props.setPattern}\n          primaryColor={props.primaryColor}\n          secondaryColor={props.secondaryColor}\n          window10percent={props.perentOfMinSize}\n        />\n      )}\n      <div className=\"select-pattern-element\">\n        {props.pattern &&\n          props.pattern.map((e, i) => (\n            <div\n              key={i}\n              style={{\n                background:\n                  isValue === i ? props.secondaryColor : 'none',\n                borderColor: props.secondaryColor,\n              }}\n              className=\"select-pattern-element-icon\"\n              onClick={() => handleSelectPatternClick(i)}\n            />\n          ))}\n      </div>\n    </div>\n  )\n}\n\nexport default CreatePattern\n","import React from 'react'\nimport './styles/upload-image.css'\n\n// Uploads image locally in the browser\n// To be used in ./UploadImage.js\n\nfunction UploadImage(props) {\n  const handleFileUpload = function(e) {\n    e.stopPropagation()\n    e.preventDefault()\n\n    const file = e.target.files\n      ? e.target.files[0]\n      : e.dataTransfer.files[0]\n\n    const reader = new FileReader()\n    reader.onload = e => {\n      props.handleImageUpload(e.target.result)\n    }\n\n    reader.onerror = e => {\n      console.log('error')\n    }\n\n    reader.readAsDataURL(file)\n  }\n\n  const handleDragOver = function(e) {\n    e.stopPropagation()\n    e.preventDefault()\n  }\n\n  return (\n    <div\n      className=\"uploadimage-container\"\n      onDragOver={handleDragOver}\n      onDrop={handleFileUpload}\n    >\n      <span className=\"uploadimage-info\">\n        <form>\n          <label tabIndex=\"1\" htmlFor=\"upload-button\">\n            <div\n              style={{\n                backgroundColor: props.secondaryColor,\n                color: props.primaryColor,\n              }}\n              className=\"choose-file-button\"\n            >\n              choose file\n            </div>\n          </label>\n          <input\n            id=\"upload-button\"\n            style={{ width: '1px', visibility: 'hidden' }}\n            type=\"file\"\n            onChange={e => handleFileUpload(e)}\n          ></input>\n        </form>\n      </span>\n    </div>\n  )\n}\n\nexport default UploadImage\n","import React, { useState, useEffect, useRef } from 'react'\nimport UploadImage from './UploadImage.js'\nimport './styles/view-image.css'\n\nfunction ViewPattern(props) {\n  const [WIDTH, setWIDTH] = useState(undefined)\n  const [HEIGHT, setHEIGHT] = useState(undefined)\n  const [isBigSize, setIsBigSize] = useState(false)\n\n  useEffect(() => {\n    // Set the size for the canvas based on viewport width\n\n    const orientation =\n      window.visualViewport.width > window.visualViewport.height\n        ? 'landscape'\n        : 'portrait'\n    if (!isBigSize) {\n      let size = window.visualViewport.width\n      size =\n        size > 760 && orientation === 'landscape' ? size * 0.4 : size\n      setWIDTH(size)\n      setHEIGHT(size)\n    }\n  }, [isBigSize])\n\n  const elements = 40\n  const patternElementWidth = WIDTH / elements\n\n  const patternCanvasRef = useRef(0)\n\n  function handleCanvasClick() {\n    if (!isBigSize) {\n      let size = window.visualViewport.height\n      setWIDTH(size)\n      setHEIGHT(size)\n      setIsBigSize(true)\n    } else {\n      setIsBigSize(false)\n    }\n  }\n\n  useEffect(() => {\n    const canvas = patternCanvasRef.current\n    const ctx = canvas.getContext('2d')\n\n    canvas.width = WIDTH\n    canvas.height = HEIGHT\n\n    // Draw pattern on canvas\n\n    for (let i = 0; i < elements; i++) {\n      for (let j = 0; j < elements; j++) {\n        // find this pixels value and draw pattern\n        const posInPixelated = j + elements * i\n        const valueOfPixel = props.pixelated[posInPixelated]\n        const pixelPattern = props.pattern[valueOfPixel]\n        for (let x = 0; x < 6; x++) {\n          for (let y = 0; y < 6; y++) {\n            const posInPattern = y + 6 * x\n            ctx.fillStyle = pixelPattern[posInPattern]\n              ? props.primaryColor\n              : props.secondaryColor\n            ctx.fillRect(\n              j * patternElementWidth +\n                (y * WIDTH) / elements / 6 -\n                0.6,\n              i * patternElementWidth +\n                (x * HEIGHT) / elements / 6 -\n                0.6,\n              WIDTH / elements / 6 + 0.6,\n              WIDTH / elements / 6 + 0.6,\n            )\n          }\n        }\n      }\n    }\n  }, [\n    props.pattern,\n    props.primaryColor,\n    props.secondaryColor,\n    WIDTH,\n    HEIGHT,\n  ])\n\n  return <canvas onClick={handleCanvasClick} ref={patternCanvasRef} />\n}\n\nfunction ViewImage(props) {\n  // Set up size for the canvas\n  // !! Should [fix] to relative sizes\n\n  const WIDTH = 600\n  const HEIGHT = 600\n  const patternElementWidth = 15\n\n  const canvasRef = useRef(0)\n\n  useEffect(() => {\n    const findAverageColor = function(pixels) {\n      // Find the average color of a slice of the uploaded image.\n      // Returns the color as greyscale rgb.\n\n      let rgba = [0, 0, 0, 0]\n\n      for (let p = 0; p < pixels.length; p += 4) {\n        rgba[0] += pixels[p]\n        rgba[1] += pixels[p + 1]\n        rgba[2] += pixels[p + 2]\n        rgba[3] += pixels[p + 3]\n      }\n\n      rgba[0] = Math.round(rgba[0] / (pixels.length / 4))\n      rgba[1] = Math.round(rgba[1] / (pixels.length / 4))\n      rgba[2] = Math.round(rgba[2] / (pixels.length / 4))\n      rgba[3] = Math.round(rgba[3] / (pixels.length / 4))\n\n      const greyscaleRGBValue = Math.round(\n        (rgba[0] + rgba[1] + rgba[2]) / 3,\n      )\n\n      return greyscaleRGBValue\n    }\n\n    const findValue = function(greyscaleRGBValue, max) {\n      // Returns a value to give the slice of image\n      // based on greyscaleRGBValue\n      const minimizer = Math.round(max / props.numberOfValues)\n      let value = 0\n\n      if (greyscaleRGBValue < minimizer) {\n        value = 0\n      } else if (greyscaleRGBValue < minimizer * 2) {\n        value = 1\n      } else if (greyscaleRGBValue < minimizer * 3) {\n        value = 2\n      } else if (greyscaleRGBValue < minimizer * 4) {\n        value = 3\n      } else if (greyscaleRGBValue < minimizer * 5) {\n        value = 4\n      } else if (greyscaleRGBValue < minimizer * 6) {\n        value = 5\n      }\n\n      return value\n    }\n\n    // setup canvas\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n    canvas.width = WIDTH\n    canvas.height = HEIGHT\n\n    const img = new Image()\n    img.src = props.uploadedImage\n\n    img.addEventListener(\n      'load',\n      () => {\n        // Draw image to canvas\n        ctx.drawImage(img, 0, 0, WIDTH, HEIGHT)\n        let pixels = []\n\n        // Loop over the image and push imageData from slices of the image to the pixels array\n        for (let i = 0; i < WIDTH; i += patternElementWidth) {\n          for (let j = 0; j < HEIGHT; j += patternElementWidth) {\n            let imageData = ctx.getImageData(\n              j,\n              i,\n              patternElementWidth,\n              patternElementWidth,\n            )\n            imageData = Array.from(imageData.data)\n            // Push the average color in greyscale\n            pixels.push(findAverageColor(imageData))\n          }\n        }\n\n        // Find the highest greyscale value\n        // Map over pixels and change it to n < max / nmbrOfValues\n        let max = 0\n        pixels.forEach(n => {\n          max = max < n ? n : max\n        })\n        pixels = pixels.map(n => findValue(n, max))\n        props.handlePixelated(pixels)\n      },\n      false,\n    )\n  }, [])\n\n  return (\n    <div>\n      {!props.pixelated && (\n        <canvas\n          style={{ visibility: 'hidden' }}\n          ref={canvasRef}\n        ></canvas>\n      )}\n\n      <div\n        className=\"pixelated\"\n        style={{\n          width: WIDTH,\n          height: HEIGHT,\n          display: 'grid',\n          gridTemplateColumns: 'repeat(20,1fr)',\n        }}\n      >\n        {props.pixelated &&\n          props.pixelated.map((pixel, index) => (\n            <div\n              key={index}\n              className=\"pixel\"\n              style={{\n                display: 'grid',\n                gridTemplateColumns: 'repeat(6, 1fr)',\n                width: WIDTH / patternElementWidth,\n                height: HEIGHT / patternElementWidth,\n              }}\n            >\n              {props.pattern &&\n                props.pattern[pixel] &&\n                props.pattern[pixel].map(e => (\n                  <div\n                    style={{\n                      width: patternElementWidth / 6,\n                      height: patternElementWidth / 6,\n                      backgroundColor: e ? 'black' : 'grey',\n                    }}\n                  ></div>\n                ))}\n            </div>\n          ))}\n      </div>\n    </div>\n  )\n}\n\nfunction ViewCanvas(props) {\n  const [uploadedImage, setUploadedImage] = useState(false)\n  const [pixelated, setPixelated] = useState(false)\n\n  function handlePixelated(pixels) {\n    setPixelated(pixels)\n  }\n\n  function handleImageUpload(file) {\n    setUploadedImage(file)\n  }\n\n  function handleCloseButton() {\n    setUploadedImage(false)\n    setPixelated(false)\n  }\n\n  return (\n    <div className=\"canvas-container\">\n      {!uploadedImage ? (\n        <UploadImage\n          primaryColor={props.primaryColor}\n          secondaryColor={props.secondaryColor}\n          handleImageUpload={handleImageUpload}\n        />\n      ) : props.pattern && pixelated ? (\n        <div className=\"view-pattern-container\">\n          <ViewPattern\n            primaryColor={props.primaryColor}\n            secondaryColor={props.secondaryColor}\n            pattern={props.pattern}\n            numberOfValues={props.numberOfValues}\n            handlePixelated={handlePixelated}\n            pixelated={pixelated}\n          />\n        </div>\n      ) : (\n        !pixelated && (\n          <ViewImage\n            uploadedImage={uploadedImage}\n            pattern={props.pattern}\n            numberOfValues={props.numberOfValues}\n            handlePixelated={handlePixelated}\n            pixelated={pixelated}\n          />\n        )\n      )}\n    </div>\n  )\n}\n\nexport default ViewCanvas\n","import React from 'react'\n\nfunction CurrentColor(props) {\n  const currentColorStyle = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%,-50%)',\n    background: props.color,\n    width: '30%',\n    paddingTop: '30%',\n    borderRadius: '50%',\n    border: '2px solid white',\n    zIndex: 10,\n  }\n\n  return (\n    <div\n      onClick={e => props.handleClick(e)}\n      style={currentColorStyle}\n    />\n  )\n}\n\nexport default CurrentColor\n","import React, { useState, useEffect } from 'react'\nimport { useSpring, animated } from 'react-spring'\n\nfunction AlternativeColor(props) {\n  const [position, setPosition] = useState([0, 0])\n  const [startX, setStartX] = useState(undefined)\n  const [startY, setStartY] = useState(undefined)\n\n  useEffect(() => {\n    // calculate the radius of currentColor and alternative colors in pixels\n    // Sizes is 20% and 10% of container\n\n    function handleResize() {\n      const containerWidth = props.forwardRef.current.offsetWidth\n      const containerHeight = props.forwardRef.current.offsetHeight\n      const currentColorRadius = ((containerWidth / 100) * 30) / 2\n      const alternativeColorRadius = ((containerWidth / 100) * 20) / 2\n\n      // center of the container.\n      const centerX = containerWidth / 2\n      const centerY = containerHeight / 2\n\n      // Start position for the alternative colors\n      setStartX(centerX - alternativeColorRadius)\n      setStartY(centerY - alternativeColorRadius)\n      // Find position of alternative color.\n      // Get point at d degrees around the current color\n      const r = currentColorRadius * 2.5\n      const deg = props.deg * (Math.PI / 180)\n      let x = r * Math.cos(deg)\n      let y = r * Math.sin(deg)\n\n      // x += centerX - currentColorRadius + alternativeColorRadius\n      // y += centerY - currentColorRadius + alternativeColorRadius\n\n      setPosition([x, y])\n    }\n    handleResize()\n\n    window.addEventListener('resize', handleResize, false)\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false)\n    }\n  }, [])\n\n  const alternativeColorStyle = {\n    position: 'absolute',\n    top: startX,\n    left: startY,\n    width: '20%',\n    paddingTop: '20%',\n    borderRadius: '50%',\n  }\n\n  const spring = useSpring({\n    config: { duration: 300 },\n    transform: props.showColors\n      ? `translate(${position[0]}px,${position[1]}px) scale(1)`\n      : 'translate(0px,0px) scale(0)',\n    opacity: props.showColors ? 1 : 0,\n    from: {\n      transform: props.showColors\n        ? 'translate(0px,0px) scale(0)'\n        : `translate(${position[0]}px,${position[1]}px) scale(1)`,\n      opacity: props.showColors ? 0 : 1,\n    },\n  })\n\n  return (\n    <animated.div\n      onClick={() => props.handleSwapColor(props.index)}\n      style={{\n        ...spring,\n        ...alternativeColorStyle,\n        background: props.color,\n      }}\n    />\n  )\n}\n\nexport default AlternativeColor\n","import React, { useState, useRef, useEffect } from 'react'\nimport CurrentColor from './CurrentColor.js'\nimport AlternativeColor from './AlternativeColor.js'\n\nfunction ColorPicker(props) {\n  const containerRef = useRef(0)\n\n  const [colors, setColors] = useState(props.colors)\n  const [hasColor, setHasColor] = useState(props.isColor)\n  const [showColors, setShowColors] = useState(true)\n\n  useEffect(() => {\n    props.setSelectedColor(hasColor)\n  }, [hasColor])\n\n  function handleClick() {\n    setShowColors(!showColors)\n  }\n\n  function handleSwapColor(indexOfClickedColor) {\n    console.log('clicked')\n    // Swap clicked color with current color\n    let updateColors = [...colors]\n    let updateHasColor = hasColor\n\n    updateHasColor = updateColors[indexOfClickedColor]\n    updateColors[indexOfClickedColor] = hasColor\n\n    setHasColor(updateHasColor)\n    setColors(updateColors)\n    // Hide colors after its swaped..\n    setShowColors(false)\n  }\n  const containerStyle = {\n    position: 'relative',\n    width: props.window10percent || '10vw',\n    height: props.window10percent || '10vw',\n  }\n  return (\n    <div>\n      <div ref={containerRef} style={containerStyle}>\n        <CurrentColor handleClick={handleClick} color={hasColor} />\n        {colors &&\n          [0, 1, 2, 3, 4, 5, 6, 7].map(i => (\n            <AlternativeColor\n              key={i}\n              showColors={showColors}\n              index={i}\n              color={colors[i]}\n              deg={i * 45}\n              handleSwapColor={handleSwapColor}\n              forwardRef={containerRef}\n            />\n          ))}\n      </div>\n    </div>\n  )\n}\n\nexport default ColorPicker\n","import React, { useState } from 'react'\nimport ColorPicker from './color-picker/ColorPicker.js'\n\nfunction ChangeColor(props) {\n  const {\n    primaryColor,\n    setPrimaryColor,\n    secondaryColor,\n    setSecondaryColor,\n  } = { ...props }\n\n  const [isChangeColor, setIsChangeColor] = useState(false)\n\n  return isChangeColor ? (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateRows: '1fr 1fr auto',\n        justifyItems: 'center',\n        alignItems: 'center',\n        position: 'absolute',\n        zIndex: '666',\n        left: '50px',\n        height: '90vh',\n        right: 0,\n        bottom: '0px',\n        background: secondaryColor,\n      }}\n    >\n      <ColorPicker\n        window10percent={180}\n        selectedColor={primaryColor}\n        setSelectedColor={setPrimaryColor}\n        colorID={0}\n        isColor={primaryColor}\n        colors={[\n          '#F1CDB8',\n          '#3E7490',\n          '#D9B85F',\n          '#9E969B',\n          '#2F786B',\n          '#EB9C5A',\n          '#21141A',\n          'green',\n        ]}\n      />\n      <ColorPicker\n        window10percent={180}\n        selectedColor={secondaryColor}\n        setSelectedColor={setSecondaryColor}\n        colorID={1}\n        isColor={secondaryColor}\n        colors={[\n          '#49BAE6',\n          '#D91825',\n          '#E9E6CC',\n          '#E17783',\n          '#0F2E3B',\n          '#513A2C',\n          '#E09A29',\n          'green',\n        ]}\n      />\n      <button\n        style={{\n          height: 40,\n          borderRadius: 0,\n          background: 'none',\n          border: `1px solid ${primaryColor}`,\n          color: primaryColor,\n          marginBottom: '2%',\n        }}\n        onClick={() => {\n          setIsChangeColor(false)\n        }}\n      >\n        Close\n      </button>\n    </div>\n  ) : (\n    <button\n      style={{\n        position: 'absolute',\n        right: 0,\n        bottom: 150,\n        transform: 'rotate(-90deg)',\n        transformOrigin: 'right bottom',\n        background: 'none',\n        border: `1px solid ${secondaryColor}`,\n        borderBottom: 'none',\n        color: secondaryColor,\n        padding: 5,\n      }}\n      onClick={() => {\n        setIsChangeColor(!isChangeColor)\n      }}\n    >\n      Change color\n    </button>\n  )\n}\n\nexport default ChangeColor\n","import { useState, useEffect } from 'react'\n\nfunction usePercentOfMinSize(percent) {\n  const [size, setSize] = useState(undefined)\n\n  useEffect(() => {\n    function handleResize() {\n      const newSize =\n        window.innerWidth < window.innerHeight\n          ? window.innerWidth\n          : window.innerHeight\n\n      setSize(newSize)\n    }\n\n    window.addEventListener('resize', handleResize, false)\n\n    return () => {\n      window.removeEventListener('resize', false)\n    }\n  }, [])\n\n  return Math.floor((size / 100) * percent)\n}\n\nexport default usePercentOfMinSize\n","import React, { useState, useEffect } from 'react'\nimport CreatePattern from './components/CreatePattern.js'\nimport ViewCanvas from './components/ViewImage.js'\nimport ChangeColor from './components/ChangeColor.js'\nimport './App.css'\nimport usePercentOfMinSize from './CustomHooks.js'\n\nfunction App() {\n  const [pattern, setPattern] = useState(undefined)\n  const [primaryColor, setPrimaryColor] = useState('#E64D36')\n  const [secondaryColor, setSecondaryColor] = useState('#D9CDE6')\n  const numberOfValues = 6\n\n  const percentOfMinSize = usePercentOfMinSize(40)\n\n  useEffect(() => {\n    document.body.style = `background: ${primaryColor};`\n  }, [primaryColor])\n\n  return (\n    <div\n      className=\"background\"\n      style={{\n        backgroundColor: primaryColor,\n        borderColor: secondaryColor,\n        color: secondaryColor,\n      }}\n    >\n      <ChangeColor\n        primaryColor={primaryColor}\n        setPrimaryColor={setPrimaryColor}\n        secondaryColor={secondaryColor}\n        setSecondaryColor={setSecondaryColor}\n      />\n      <div className=\"app-container\">\n        <div\n          style={{\n            display: 'grid',\n            justifyItems: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <ViewCanvas\n            pattern={pattern}\n            numberOfValues={numberOfValues}\n            primaryColor={primaryColor}\n            secondaryColor={secondaryColor}\n          />\n        </div>\n        <div className=\"pattern-container\">\n          <CreatePattern\n            pattern={pattern}\n            setPattern={setPattern}\n            primaryColor={primaryColor}\n            secondaryColor={secondaryColor}\n            percentOfMinSize={percentOfMinSize}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}